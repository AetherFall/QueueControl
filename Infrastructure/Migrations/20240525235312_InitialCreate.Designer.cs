// <auto-generated />
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240525235312_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("Shared.Models.PrintDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentPathReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentSQLQuery")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrintTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PrintTypeId");

                    b.ToTable("PrintDocuments");
                });

            modelBuilder.Entity("Shared.Models.PrintQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentParameters")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfCopy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrinterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PrinterId");

                    b.ToTable("PrintQueues");
                });

            modelBuilder.Entity("Shared.Models.PrintType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PrintTypes");
                });

            modelBuilder.Entity("Shared.Models.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IPv4")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrinterTCP")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortSerial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PrintTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrinterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PrintTypeId");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("Shared.Models.PrintDocument", b =>
                {
                    b.HasOne("Shared.Models.PrintType", "PrintType")
                        .WithMany("PrintDocuments")
                        .HasForeignKey("PrintTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrintType");
                });

            modelBuilder.Entity("Shared.Models.PrintQueue", b =>
                {
                    b.HasOne("Shared.Models.PrintDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Printer", "Printer")
                        .WithMany()
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Printer");
                });

            modelBuilder.Entity("Shared.Models.Printer", b =>
                {
                    b.HasOne("Shared.Models.PrintType", "PrintType")
                        .WithMany("Printers")
                        .HasForeignKey("PrintTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrintType");
                });

            modelBuilder.Entity("Shared.Models.PrintType", b =>
                {
                    b.Navigation("PrintDocuments");

                    b.Navigation("Printers");
                });
#pragma warning restore 612, 618
        }
    }
}
